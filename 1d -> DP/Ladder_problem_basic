Code
Approach 1 (Recursion) Brute
Time: O(2^N)
Space: O(N)
TLE (Not Accepted)
class Solution {
public:
    int climbStairs(int n) {
        if(n <= 2)
            return n;

        return climbStairs(n-1) + climbStairs(n-2);
    }
};
Approach 2 (Memoization)
Time: O(N)
Space: O(N) + O(N)
class Solution {
public:
    int climbStairWrapper(int n, vector<int> &dp){
        if(dp[n] == -1){
            int res;

            if(n == 1 || n == 2)
                res = n;

            else
                res = climbStairWrapper(n-1, dp) + climbStairWrapper(n-2, dp);

            dp[n] = res;
        }

        return dp[n];
    }

    int climbStairs(int n) {
        vector<int> dp(n+1, -1);
        
        return climbStairWrapper(n, dp);
    }
};
Approach 3 (Tabulation)
Time: O(N)
Space: O(N)
class Solution {
public:
    int climbStairs(int n) {
        if(n <= 2)
            return n;
        
        vector<int> dp(n+1, -1);

        dp[1] = 1;
        dp[2] = 2;
        for(int i=3; i<n+1; i++)
            dp[i] = dp[i-1] + dp[i-2];

        return dp[n];
    }
};
Approach 4 (Iterative) Optimal
Time: O(N)
Space: O(1)
class Solution {
public:
    int climbStairs(int n) {
        if(n <= 2)
            return n;
        
        int n1 = 1;
        int n2 = 2;
        for(int i=3; i<n+1; i++){
            int curr = n1 + n2;
            n1 = n2;
            n2 = curr;
        }

        return n2;
    }
};
// Link - > https://leetcode.com/problems/climbing-stairs/solutions/3693218/4-approaches-c-recursion-memo-tabula-iterative/
