//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    int first_occurance(vector<long long> v, long long x){
        int low = 0, high = v.size() - 1;
        int count = 0;
	    while(low <= high)
	    {
		int mid = (low + high) / 2;

		if(v[mid] == x){
		   if(mid == 0 || v[mid-1]!=v[mid]){
		       return mid;
		   }
		   else{
		       // left call
		       high = mid - 1;
		   }
		}
			
		else if(v[mid] > x)
			high = mid - 1;

		else
			low = mid + 1;
	    }
	    return -1;
    }
    int last_occurance(vector<long long> v, long long x, long n){
        int low = 0, high = v.size() - 1;
        int count = 0;
	    while(low <= high)
	    {
		int mid = (low + high) / 2;

		if(v[mid] == x){
		   if(mid == n-1  || v[mid+1]!=v[mid]){
		       return mid;
		   }
		   else{
		       // right  call
		      low = mid + 1;
		   }
		}
			
		else if(v[mid] > x)
			high = mid - 1;

		else
			low = mid + 1;
	    }
	    return -1;
    }
    pair<long,long> indexes(vector<long long> v, long long x)
    {
        // code here
        
        long n = v.size();
        long first_i =first_occurance(v,x);
        long second_i =last_occurance(v,x,n);
        pair<long, long> PAIR2(first_i, second_i);
        return PAIR2;
    }
};

//{ Driver Code Starts.

int main()
 {
    long long t;
    cin>>t;
    while(t--)
    {
        long long n, k;
        vector<long long>v;
        cin>>n;
        for(long long i=0;i<n;i++)
        {
            cin>>k;
            v.push_back(k);
        }
        long long x;
        cin>>x;
        Solution obj;
        pair<long,long> pair = obj.indexes(v, x);
        
        if(pair.first==pair.second and pair.first==-1)
        cout<< -1 <<endl;
        else
        cout<<pair.first<<" "<<pair.second<<endl;

    }
	return 0;
}

// } Driver Code Ends
